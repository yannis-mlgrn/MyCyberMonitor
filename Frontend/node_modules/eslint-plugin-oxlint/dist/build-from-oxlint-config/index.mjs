import fs from "node:fs";
import JSONCParser from "jsonc-parser";
import { isObject } from "./utilities.mjs";
import { readRulesFromConfig, handleRulesScope } from "./rules.mjs";
import { readCategoriesFromConfig, handleCategoriesScope } from "./categories.mjs";
import { readPluginsFromConfig } from "./plugins.mjs";
import { readIgnorePatternsFromConfig, handleIgnorePatternsScope } from "./ignore-patterns.mjs";
import { readOverridesFromConfig, handleOverridesScope } from "./overrides.mjs";
import { splitDisabledRulesForVueAndSvelteFiles } from "../config-helper.mjs";
const defaultPlugins = ["react", "unicorn", "typescript"];
const defaultCategories = { correctness: "warn" };
const getConfigContent = (oxlintConfigFile) => {
  try {
    const content = fs.readFileSync(oxlintConfigFile, "utf8");
    try {
      const configContent = JSONCParser.parse(content);
      if (!isObject(configContent)) {
        throw new TypeError("not an valid config file");
      }
      return configContent;
    } catch {
      console.error(
        `eslint-plugin-oxlint: could not parse oxlint config file: ${oxlintConfigFile}`
      );
      return void 0;
    }
  } catch {
    console.error(
      `eslint-plugin-oxlint: could not find oxlint config file: ${oxlintConfigFile}`
    );
    return void 0;
  }
};
const buildFromOxlintConfig = (config) => {
  const rules = {};
  const plugins = readPluginsFromConfig(config) ?? defaultPlugins;
  const categories = readCategoriesFromConfig(config) ?? defaultCategories;
  plugins.push("eslint");
  if (plugins.includes("react")) {
    plugins.push("react-hooks");
  }
  handleCategoriesScope(plugins, categories, rules);
  const configRules = readRulesFromConfig(config);
  if (configRules !== void 0) {
    handleRulesScope(configRules, rules);
  }
  const baseConfig = {
    name: "oxlint/from-oxlint-config",
    rules
  };
  const ignorePatterns = readIgnorePatternsFromConfig(config);
  if (ignorePatterns !== void 0) {
    handleIgnorePatternsScope(ignorePatterns, baseConfig);
  }
  const overrides = readOverridesFromConfig(config);
  const configs = splitDisabledRulesForVueAndSvelteFiles(
    baseConfig
  );
  if (overrides !== void 0) {
    handleOverridesScope(overrides, configs, categories);
  }
  return configs;
};
const buildFromOxlintConfigFile = (oxlintConfigFile) => {
  const config = getConfigContent(oxlintConfigFile);
  if (config === void 0) {
    return [];
  }
  return buildFromOxlintConfig(config);
};
export {
  buildFromOxlintConfig,
  buildFromOxlintConfigFile
};
